require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe EventTypesController do

  def valid_attributes
    {:id => 1, :feature => "Feature", :vendor => "Vendor", :resource_id => 1 }
  end

  before(:each) {
     @event_type = EventType.new valid_attributes
     EventType.stub!(:find).with("1").and_return(@event_type)
  }

  describe "GET index" do
    it "assigns all event_types as @event_types" do
      EventType.stub!(:all).and_return([@event_type])
      get :index
      assigns(:event_types).should eq([@event_type])
    end
  end

  describe "GET show" do
    it "assigns the requested event_type as @event_type" do
      get :show, :id => @event_type.id.to_s
      assigns(:event_type).should eq(@event_type)
    end
  end

  describe "GET edit" do
    it "assigns the requested event_type as @event_type" do
      get :edit, :id => @event_type.id.to_s
      assigns(:event_type).should eq(@event_type)
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      before(:each) { @event_type.should_receive(:update_resource).with('1').and_return(true) }

      it "assigns the requested event_type as @event_type" do
        put :update, :id => @event_type.id.to_s, :resource_id => '1'
        assigns(:event_type).should eq(@event_type)
      end

      it "redirects to the event_type" do
        put :update, :id => @event_type.id.to_s, :resource_id => '1'
        response.should redirect_to(@event_type)
      end
    end

    describe "with invalid params" do
      before(:each) { EventType.any_instance.stub(:update_resource).with('1').and_return(false) }

      it "assigns the event_type as @event_type" do
        # Trigger the behavior that occurs when invalid params are submitted
        put :update, :id => @event_type.id.to_s, :resource_id =>  '1'
        assigns(:event_type).should eq(@event_type)
      end

      it "re-renders the 'edit' template" do
        put :update, :id => @event_type.id.to_s, :resource_id => '1'
        response.should render_template("edit")
      end
    end
  end

end
